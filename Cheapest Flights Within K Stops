class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        Map<Integer, List<int[]>> graph = buildGraph(flights);
        
        int minPathCost = Integer.MAX_VALUE;
        Queue<int[]> q = new LinkedList<>();
        int stop = 0;
        q.add(new int[]{src, 0});
        
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                int[] currentStop = q.poll();
                if(currentStop[0] == dst) {
                    minPathCost = Math.min(minPathCost, currentStop[1]);
                }
                if(!graph.containsKey(currentStop[0])) {
                    continue;
                }
                for(int[] f : graph.get(currentStop[0])) {
                    if(currentStop[1] + f[1] > minPathCost)
                        continue; // prunning
                    q.add(new int[] {f[0], f[1] + currentStop[1]});
                }
            }
            if(stop++ > K)
                break;
        }
        
        return minPathCost == Integer.MAX_VALUE ? -1 : minPathCost;
    }
    
    private Map<Integer, List<int[]>> buildGraph(int[][] flights) {
        Map<Integer, List<int[]>> graph = new HashMap<>();
        for(int[] f : flights) {
            graph.putIfAbsent(f[0], new ArrayList<>());
            graph.get(f[0]).add(new int[] {f[1], f[2]});
        }
        return graph;
    }
}




