class Solution {
    public void solve(char[][] board) {
        int m=board.length;
        
        if(m == 0){
            return;
        }
        
        int n=board[0].length;
        
        for(int i=0;i<n;i++){
            if(board[0][i] == 'O'){
                dfs(board,0,i);
            }
            
            if(board[m-1][i] == 'O'){
                dfs(board,m-1,i);
            }
        }
        
        for(int i=0;i<m;i++){
            if(board[i][0] == 'O'){
                dfs(board , i , 0);
            }
            
            if(board[i][n-1] == 'O'){
                dfs(board,i,n-1);
            }
        }
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]  == 'O'){
                    board[i][j]='X';
                }
                
                if(board[i][j] == 'P'){
                    board[i][j]='O';
                }
            }
        }
    }
    
    private void dfs(char[][] b,int x,int y){
        if(x>=0 && x<b.length && y>= 0 && y<b[0].length && b[x][y] == 'O'){
            b[x][y] ='P';
                dfs(b,x+1,y);
            dfs(b,x,y+1);
            dfs(b,x-1,y);
            dfs(b,x,y-1);
        }
        else{
            return ;
        }
    }
}
